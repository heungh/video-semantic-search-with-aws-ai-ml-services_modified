AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Parameters:
  AossVectorIndex:
    Type: String
    Description: Amazon OpenSearch Serverless Vector Index
    Default: vss-index
  BedrockTextEmbeddingModel:
    Type: String
    Description: Bedrock Text Embedding Model
    Default: cohere.embed-english-v3
  BedrockTextEmbeddingDimension:
    Type: Number
    Description: Bedrock Text Embedding Dimension
    Default: 1024
  BedrockImageEmbeddingModel:
    Type: String
    Description: Bedrock Image Embedding Model
    Default: amazon.titan-embed-image-v1
  BedrockImageEmbeddingDimension:
    Type: Number
    Description: Bedrock Image Embedding Dimension
    Default: 1024
  BedrockLlmSonnet3:
    Type: String
    Description: Bedrock Large Language Model
    Default: us.anthropic.claude-3-sonnet-20240229-v1:0
  BedrockLlmSonnet35:
    Type: String
    Description: Bedrock Large Language Model
    Default: us.anthropic.claude-3-5-sonnet-20241022-v2:0
  BedrockLlmNova:
    Type: String
    Description: Bedrock Large Language Model
    Default: us.amazon.nova-pro-v1:0
  BedrockLlmSonnet37:
    Type: String
    Description: Bedrock Large Language Model
    Default: us.anthropic.claude-3-7-sonnet-20250219-v1:0

Globals:
  Function:
    Tracing: Active
    Timeout: 600
    MemorySize: 512
    Runtime: python3.11
    # ReservedConcurrentExecutions: 10
    Handler: app.lambda_handler
    KmsKeyArn: !GetAtt VssKmsKey.Arn

Resources:
  VssSecurityPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: !Sub vss-${AWS::AccountId}
      Type: encryption
      Policy: !Sub |
        {
          "Rules": [
            {
              "Resource": [
                "collection/vss-collection-${AWS::AccountId}"
              ],
              "ResourceType": "collection"
            }
          ],
          "AWSOwnedKey": true
        }

  VssCollection:
    Type: AWS::OpenSearchServerless::Collection
    DependsOn: VssSecurityPolicy
    Properties:
      Name: !Sub vss-collection-${AWS::AccountId}
      Type: VECTORSEARCH

  VssNetworkPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: !Sub vss-${AWS::AccountId}
      Description: public access for dashboard and collection endpoint
      Type: network
      Policy: !Sub |
        [
          {
            "Description": "Publics access for collection endpoint",
            "Rules": [
              {
                "ResourceType": "collection",
                "Resource": [
                  "collection/vss-collection-${AWS::AccountId}"
                ]
              }
            ],
            "AllowFromPublic": true
          },
          {
            "Description": "Public access for dashboards",
            "Rules": [
              {
                "ResourceType": "dashboard",
                "Resource": [
                  "collection/vss-collection-${AWS::AccountId}"
                ]
              }
            ],
            "AllowFromPublic": true
          }
        ]

  VssDataAccessPolicy:
    Type: AWS::OpenSearchServerless::AccessPolicy
    Properties:
      Name: !Sub vss-policy-${AWS::AccountId}
      Description: allow index and collection access
      Type: data
      Policy: !Sub |
        [
          {
            "Rules": [
              {
                "ResourceType": "index",
                "Resource": [
                  "index/vss-collection-${AWS::AccountId}/*"
                ],
                "Permission": [
                  "aoss:*"
                ]
              },
              {
                "ResourceType": "collection",
                "Resource": [
                  "collection/vss-collection-${AWS::AccountId}"
                ],
                "Permission": [
                  "aoss:*"
                ]
              }
            ],
            "Principal": [
              "${CreateJobRole.Arn}",
              "${CreateShotCollectionRole.Arn}",
              "${GenerateShotDescRole.Arn}",
              "${EmbeddingAossRole.Arn}",
              "${CompletedJobRole.Arn}",
              "${FailedJobRole.Arn}",
              "${SearchRole.Arn}"
            ]
          }
        ]

  VssKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for encryption
      EnableKeyRotation: True
      PendingWindowInDays: 7
      KeyPolicy:
        Version: 2012-10-17
        Id: cloudwatch_kms_key
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*

  ApiVssDevLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/api/${ApiVss}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  ApiVss:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowMethods:
          - "GET"
          - "POST"
          - "OPTIONS"
          - "PUT"
        AllowHeaders:
          - "content-type"
          - "Authorization"
        MaxAge: 300
      AccessLogSettings:
        DestinationArn: !GetAtt ApiVssDevLogGroup.Arn
        Format: >-
          {"requestId":"$context.requestId","ip":"$context.identity.sourceIp","user":"$context.identity.user","method":"$context.httpMethod","status":"$context.status","route":"$context.routeKey","responseLength":"$context.responseLength"}
      Auth:
        Authorizers:
          CognitoAuthorizer:
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${VssCognito}
              audience:
                - !Ref VssCognitoUserPoolClient
            IdentitySource: "$request.header.Authorization"
        DefaultAuthorizer: CognitoAuthorizer

  DynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt VssKmsKey.Arn
      AttributeDefinitions:
        - AttributeName: JobId
          AttributeType: S
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: RekognitionTaskId
          AttributeType: S
        - AttributeName: TranscribeTaskId
          AttributeType: S
      KeySchema:
        - AttributeName: JobId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserGSI
          KeySchema:
            - AttributeName: UserId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: RekognitionGSI
          KeySchema:
            - AttributeName: RekognitionTaskId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: TranscribeGSI
          KeySchema:
            - AttributeName: TranscribeTaskId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  OpensearchpyLambdaPackage:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: python3.11
    Properties:
      RetentionPolicy: Delete
      ContentUri: layers/opensearch
      CompatibleRuntimes:
        - python3.11

  FfmpegLambdaPackage:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      RetentionPolicy: Delete
      ContentUri: layers/ffmpeg
      CompatibleRuntimes:
        - python3.11

  CompletedJob:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
    Properties:
      CodeUri: functions/completedjob
      Layers:
        - !Ref OpensearchpyLambdaPackage
      Environment:
        Variables:
          vss_dynamodb_table: !Ref DynamodbTable
          region: !Ref AWS::Region
          aoss_host: !GetAtt VssCollection.CollectionEndpoint
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Update*
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}/*
            - Effect: Allow
              Action:
                - aoss:APIAccessAll
                - aoss:Create*
                - aoss:Update*
                - aoss:Get*
                - aoss:List*
              Resource: !Sub arn:${AWS::Partition}:aoss:${AWS::Region}:${AWS::AccountId}:collection/*
            - Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:*

  CompletedJobLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CompletedJob}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  CreateJob:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
    Properties:
      CodeUri: functions/create_job
      Layers:
        - !Ref OpensearchpyLambdaPackage
      Environment:
        Variables:
          region: !Ref AWS::Region
          bucket_videos: !Ref S3Videos
          sqs_queue_url: !GetAtt Sqs.QueueUrl
          vss_dynamodb_table: !Ref DynamodbTable
          aoss_host: !GetAtt VssCollection.CollectionEndpoint
          aoss_index: !Ref AossVectorIndex
          text_embedding_dimension: !Ref BedrockTextEmbeddingDimension
          image_embedding_dimension: !Ref BedrockImageEmbeddingDimension
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
                - !Sub arn:aws:s3:::${S3Videos}/*
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Update*
                - dynamodb:Put*
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}/*
            - Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:*
            - Effect: Allow
              Action:
                - aoss:APIAccessAll
                - aoss:Create*
                - aoss:Update*
                - aoss:Get*
                - aoss:List*
              Resource: !Sub arn:${AWS::Partition}:aoss:${AWS::Region}:${AWS::AccountId}:collection/*
            - Effect: Allow
              Action:
                - sqs:SendMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource: !GetAtt Sqs.Arn
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiVss
            Path: /create_job
            Method: GET

  CreateJobLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CreateJob}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  CreateShotCollection:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
    Properties:
      CodeUri: functions/create_shot_collection
      Layers:
        - !Ref OpensearchpyLambdaPackage
      Environment:
        Variables:
          region: !Ref AWS::Region
          bucket_videos: !Ref S3Videos
          bucket_shots: !Ref S3Shots
          bucket_images: !Ref S3Images
          aoss_host: !GetAtt VssCollection.CollectionEndpoint
          image_embedding_model: !Ref BedrockImageEmbeddingModel
          image_embedding_dimension: !Ref BedrockImageEmbeddingDimension
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel*
              Resource: !Sub arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/*
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
                - !Sub arn:aws:s3:::${S3Videos}/*
                - !Sub arn:aws:s3:::${S3Shots}/*
                - !Sub arn:aws:s3:::${S3Images}/*
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Update*
                - dynamodb:Put*
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}/*
            - Effect: Allow
              Action:
                - aoss:APIAccessAll
                - aoss:Create*
                - aoss:Update*
                - aoss:Get*
                - aoss:List*
              Resource: !Sub arn:${AWS::Partition}:aoss:${AWS::Region}:${AWS::AccountId}:collection/*

  CreateShotCollectionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CreateShotCollection}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  EmbeddingAoss:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
    Properties:
      CodeUri: functions/embedding_aoss
      Layers:
        - !Ref OpensearchpyLambdaPackage
      Environment:
        Variables:
          region: !Ref AWS::Region
          bucket_videos: !Ref S3Videos
          bucket_shots: !Ref S3Shots
          bucket_images: !Ref S3Images
          text_embedding_model: !Ref BedrockTextEmbeddingModel
          image_embedding_model: !Ref BedrockImageEmbeddingModel
          aoss_host: !GetAtt VssCollection.CollectionEndpoint
          aoss_index: !Ref AossVectorIndex
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
                - !Sub arn:aws:s3:::${S3Videos}/*
                - !Sub arn:aws:s3:::${S3Shots}/*
                - !Sub arn:aws:s3:::${S3Images}/*
            - Effect: Allow
              Action:
                - bedrock:InvokeModel*
              Resource: !Sub arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/*
            - Effect: Allow
              Action:
                - aoss:APIAccessAll
                - aoss:Create*
                - aoss:Update*
                - aoss:Get*
                - aoss:List*
              Resource: !Sub arn:${AWS::Partition}:aoss:${AWS::Region}:${AWS::AccountId}:collection/*
            - Effect: Allow
              Action:
                - iam:GetRole
                - iam:PassRole
              Resource: !GetAtt SnsRekognitionRole.Arn

  EmbeddingAossLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${EmbeddingAoss}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  EventbridgeTranscribe:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
    Properties:
      CodeUri: functions/eventbridge_transcribe
      Environment:
        Variables:
          bucket_transcripts: !Ref S3Transcripts
          vss_dynamodb_table: !Ref DynamodbTable
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
                - !Sub arn:aws:s3:::${S3Transcripts}/*
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}/*
            - Effect: Allow
              Action:
                - states:Create*
                - states:Delete*
                - states:Describe*
                - states:List*
                - states:Start*
                - states:Send*
              Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*
            - Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:*
      Events:
        EventBridge:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.transcribe
              detail-type:
                - Transcribe Job State Change
              detail:
                TranscriptionJobStatus:
                  - COMPLETED
                  - FAILED

  EventbridgeTranscribeLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${EventbridgeTranscribe}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  FailedJob:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
    Properties:
      CodeUri: functions/failedjob
      Layers:
        - !Ref OpensearchpyLambdaPackage
      Environment:
        Variables:
          vss_dynamodb_table: !Ref DynamodbTable
          region: !Ref AWS::Region
          aoss_host: !GetAtt VssCollection.CollectionEndpoint
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:UpdateItem
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}/*
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - aoss:APIAccessAll
                - aoss:Create*
                - aoss:Update*
                - aoss:Get*
                - aoss:List*
                - aoss:Delete*
              Resource: !Sub arn:${AWS::Partition}:aoss:${AWS::Region}:${AWS::AccountId}:collection/*
            - Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:*

  FailedJobLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${FailedJob}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  GenerateShotDesc:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
    Properties:
      CodeUri: functions/generate_shot_desc
      Layers:
        - !Ref OpensearchpyLambdaPackage
      Environment:
        Variables:
          region: !Ref AWS::Region
          bucket_videos: !Ref S3Videos
          bucket_shots: !Ref S3Shots
          bucket_images: !Ref S3Images
          bucket_transcripts: !Ref S3Transcripts
          aoss_host: !GetAtt VssCollection.CollectionEndpoint
          bedrock_llm: !Ref BedrockLlmSonnet37
          image_embedding_model: !Ref BedrockImageEmbeddingModel
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
                - !Sub arn:aws:s3:::${S3Videos}/*
                - !Sub arn:aws:s3:::${S3Shots}/*
                - !Sub arn:aws:s3:::${S3Images}/*
                - !Sub arn:aws:s3:::${S3Transcripts}/*
            - Effect: Allow
              Action:
                - bedrock:InvokeModel*
              Resource:
                - !Sub arn:${AWS::Partition}:bedrock:*::foundation-model/*
                - !Sub arn:${AWS::Partition}:bedrock:*:${AWS::AccountId}:inference-profile/*
            - Effect: Allow
              Action:
                - aoss:APIAccessAll
                - aoss:Create*
                - aoss:Update*
                - aoss:Get*
                - aoss:List*
              Resource: !Sub arn:${AWS::Partition}:aoss:${AWS::Region}:${AWS::AccountId}:collection/*

  GenerateShotDescLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GenerateShotDesc}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  GenerateShotImage:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
    Properties:
      CodeUri: functions/generate_shot_image
      Environment:
        Variables:
          bucket_videos: !Ref S3Videos
          bucket_images: !Ref S3Images
          bucket_shots: !Ref S3Shots
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
                - !Sub arn:aws:s3:::${S3Videos}/*
                - !Sub arn:aws:s3:::${S3Shots}/*
                - !Sub arn:aws:s3:::${S3Images}/*
      Layers:
        - !Ref FfmpegLambdaPackage

  GenerateShotImageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GenerateShotImage}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  GetAllJobs:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
    Properties:
      CodeUri: functions/get_all_jobs
      Environment:
        Variables:
          region: !Ref AWS::Region
          vss_dynamodb_table: !Ref DynamodbTable
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Update*
                - dynamodb:Put*
                - dynamodb:Scan
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}/*
            - Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:*
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiVss
            Path: /get_all_jobs
            Method: GET

  GetAllJobsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetAllJobs}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  PresignedUrlVideo:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
    Properties:
      CodeUri: functions/presignedurl_video
      Environment:
        Variables:
          bucket_videos: !Ref S3Videos
          bucket_clip_search: !Ref S3ClipSearch
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
                - !Sub arn:aws:s3:::${S3Videos}/*
                - !Sub arn:aws:s3:::${S3ClipSearch}/*
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiVss
            Path: /presignedurl_video
            Method: GET

  PresignedUrlVideoLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PresignedUrlVideo}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  RekognitionCelebrityDetection:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
    Properties:
      CodeUri: functions/rekognition_celebrity_detection
      Environment:
        Variables:
          bucket_videos: !Ref S3Videos
          bucket_shots: !Ref S3Shots
          bucket_images: !Ref S3Images
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - rekognition:StartCelebrityRecognition
                - rekognition:RecognizeCelebrities
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
                - !Sub arn:aws:s3:::${S3Videos}/*
                - !Sub arn:aws:s3:::${S3Shots}/*
                - !Sub arn:aws:s3:::${S3Images}/*
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Update*
                - dynamodb:Put*
                - dynamodb:Scan
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}/*
            - Effect: Allow
              Action:
                - iam:GetRole
                - iam:PassRole
              Resource: !GetAtt SnsRekognitionRole.Arn

  RekognitionCelebrityDetectionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${RekognitionCelebrityDetection}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  RekognitionShotDetectionSns:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
    Properties:
      CodeUri: functions/rekognition_shot_detection_sns
      Layers:
        - !Ref FfmpegLambdaPackage
      MemorySize: 5120
      Timeout: 900
      EphemeralStorage:
        Size: 10240
      Environment:
        Variables:
          vss_dynamodb_table: !Ref DynamodbTable
          SNSTopic: !Ref SnsRekognition
          bucket_videos: !Ref S3Videos
          bucket_images: !Ref S3Images
          bucket_shots: !Ref S3Shots
          tmp_dir: /tmp
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - states:SendTaskSuccess
              Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*
            - Effect: Allow
              Action:
                - rekognition:*SegmentDetection*
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:Get*
                - s3:PutObject
                - s3:List*
              Resource:
                - !Sub arn:aws:s3:::${S3Videos}/*
                - !Sub arn:aws:s3:::${S3Images}/*
                - !Sub arn:aws:s3:::${S3Shots}/*
                - !Sub arn:aws:s3:::${S3Videos}
                - !Sub arn:aws:s3:::${S3Images}
                - !Sub arn:aws:s3:::${S3Shots}

            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Update*
                - dynamodb:Put*
                - dynamodb:Scan
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}/*
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*
            - Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:*
      Events:
        Sns:
          Type: SNS
          Properties:
            Topic: !Ref SnsRekognition

  RekognitionShotDetectionSnsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${RekognitionShotDetectionSns}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  RekognitionShotDetection:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
    Properties:
      CodeUri: functions/rekognition_shot_detection
      Environment:
        Variables:
          bucket_videos: !Ref S3Videos
          vss_dynamodb_table: !Ref DynamodbTable
          vss_sns_rekognition_topic_arn: !Ref SnsRekognition
          vss_sns_rekognition_role: !GetAtt SnsRekognitionRole.Arn
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - rekognition:StartSegmentDetection
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
                - !Sub ${S3Videos.Arn}/*
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Update*
                - dynamodb:Put*
                - dynamodb:Scan
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}/*
            - Effect: Allow
              Action:
                - iam:GetRole
                - iam:PassRole
              Resource: !GetAtt SnsRekognitionRole.Arn
            - Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:*

  RekognitionShotDetectionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${RekognitionShotDetection}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  RekognizeOtherFigures:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
    Properties:
      CodeUri: functions/rekognize_other_figures
      EphemeralStorage:
        Size: 10240
      Environment:
        Variables:
          bucket_videos: !Ref S3Videos
          bucket_shots: !Ref S3Shots
          bucket_images: !Ref S3Images
          bedrock_model: !Ref BedrockLlmSonnet37
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
                - !Sub arn:aws:s3:::${S3Videos}/*
                - !Sub arn:aws:s3:::${S3Shots}/*
                - !Sub arn:aws:s3:::${S3Images}/*
            - Effect: Allow
              Action:
                - bedrock:InvokeModel*
              Resource:
                - !Sub arn:${AWS::Partition}:bedrock:*::foundation-model/*
                - !Sub arn:${AWS::Partition}:bedrock:*:${AWS::AccountId}:inference-profile/*
            - Effect: Allow
              Action:
                - iam:GetRole
                - iam:PassRole
              Resource: !GetAtt SnsRekognitionRole.Arn

  RekognizeOtherFiguresLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${RekognizeOtherFigures}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  StepFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
    Properties:
      CodeUri: functions/stepfunction
      Environment:
        Variables:
          StepFunction: !Ref StateMachine
          vss_dynamodb_table: !Ref DynamodbTable
          sqs_queue_url: !GetAtt Sqs.QueueUrl
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource:
                - !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*
            - Effect: Allow
              Action:
                - sqs:SendMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource: !GetAtt Sqs.Arn
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Update*
                - dynamodb:Put*
                - dynamodb:Scan
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}/*
            - Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:*
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt Sqs.Arn
            BatchSize: 1
            Enabled: True

  StepFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${StepFunction}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  Transcribe:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
    Properties:
      CodeUri: functions/transcribe
      Environment:
        Variables:
          bucket_videos: !Ref S3Videos
          bucket_transcripts: !Ref S3Transcripts
          vss_dynamodb_table: !Ref DynamodbTable
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: arn:aws:s3:::*/*
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: arn:aws:dynamodb:*
            - Effect: Allow
              Action:
                - transcribe:StartTranscriptionJob
              Resource: arn:aws:transcribe:*
            - Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:*

  TranscribeLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Transcribe}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  S3Images:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      LoggingConfiguration:
        DestinationBucketName: !Ref S3Logging
        LogFilePrefix: "images-logs/"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  S3ImagesPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Images
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Action: s3:*
            Resource:
              - !GetAtt S3Images.Arn
              - !Sub ${S3Images.Arn}/*
            Condition:
              Bool:
                "aws:SecureTransport": False
            Principal: "*"

  S3Shots:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      LoggingConfiguration:
        DestinationBucketName: !Ref S3Logging
        LogFilePrefix: "shots-logs/"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  S3ShotsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Shots
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Action: s3:*
            Resource:
              - !GetAtt S3Shots.Arn
              - !Sub ${S3Shots.Arn}/*
            Condition:
              Bool:
                "aws:SecureTransport": False
            Principal: "*"

  S3Transcripts:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      LoggingConfiguration:
        DestinationBucketName: !Ref S3Logging
        LogFilePrefix: "transcripts-logs/"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  S3TranscriptsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Transcripts
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Action: s3:*
            Resource:
              - !GetAtt S3Transcripts.Arn
              - !Sub ${S3Transcripts.Arn}/*
            Condition:
              Bool:
                "aws:SecureTransport": False
            Principal: "*"

  S3Videos:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - POST
            AllowedOrigins:
              - "*"
            MaxAge: 300
      LoggingConfiguration:
        DestinationBucketName: !Ref S3Logging
        LogFilePrefix: "videos-logs/"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled

  S3VideosPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Videos
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Action: s3:*
            Resource:
              - !GetAtt S3Videos.Arn
              - !Sub ${S3Videos.Arn}/*
            Condition:
              Bool:
                "aws:SecureTransport": False
            Principal: "*"

  S3ClipSearch:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - POST
            AllowedOrigins:
              - "*"
            MaxAge: 300
      LoggingConfiguration:
        DestinationBucketName: !Ref S3Logging
        LogFilePrefix: ClipSearch-logs/
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  S3ClipSearchPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3ClipSearch
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Action: s3:*
            Resource:
              - !GetAtt S3ClipSearch.Arn
              - !Sub ${S3ClipSearch.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: false
            Principal: "*"

  SnsRekognition:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId: !GetAtt VssKmsKey.Arn

  SnsRekognitionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: rekognition.amazonaws.com
      Policies:
        - PolicyName: !Sub vss_sns_rekognition_policy_${AWS::StackName}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:SetTopicAttributes
                Resource: !Ref SnsRekognition
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:*

  Sqs:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 60
      KmsMasterKeyId: !GetAtt VssKmsKey.Arn
      VisibilityTimeout: 600

  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/sfn/${AWS::StackName}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: step_function.json
      DefinitionSubstitutions:
        TranscribeArn: !GetAtt Transcribe.Arn
        RekognitionShotDetectionArn: !GetAtt RekognitionShotDetection.Arn
        GenerateShotImageArn: !GetAtt GenerateShotImage.Arn
        RekognitionCelebrityDetectionArn: !GetAtt RekognitionCelebrityDetection.Arn
        RekognizeOtherFiguresArn: !GetAtt RekognizeOtherFigures.Arn
        CreateShotCollectionArn: !GetAtt CreateShotCollection.Arn
        GenerateShotDescArn: !GetAtt GenerateShotDesc.Arn
        EmbeddingAossArn: !GetAtt EmbeddingAoss.Arn
        CompletedJobArn: !GetAtt CompletedJob.Arn
        FailedJobArn: !GetAtt FailedJob.Arn
      Tracing:
        Enabled: True
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn
        IncludeExecutionData: True
        Level: ERROR
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
                - xray:GetSamplingRules
                - xray:GetSamplingTargets
              Resource:
                - arn:aws:lambda:*:*:*
                - arn:aws:xray:*:*:*
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:CreateLogStream
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutLogEvents
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
                - logs:PutSubscriptionFilter
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListBucket
              Resource:
                - !GetAtt S3Images.Arn
                - !Sub ${S3Images.Arn}/*
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource:
                - !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*
            - Effect: Allow
              Action:
                - states:DescribeExecution
                - states:StopExecution
              Resource:
                - !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*

  Search:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
    Properties:
      CodeUri: functions/search
      Layers:
        - !Ref OpensearchpyLambdaPackage
        - !Ref FfmpegLambdaPackage
      MemorySize: 5120
      Environment:
        Variables:
          region: !Ref AWS::Region
          bucket_videos: !Ref S3Videos
          bucket_images: !Ref S3Images
          bucket_clip_search: !Ref S3ClipSearch
          bedrock_model: !Ref BedrockLlmSonnet37
          text_embedding_model: !Ref BedrockTextEmbeddingModel
          image_embedding_model: !Ref BedrockImageEmbeddingModel
          aoss_host: !GetAtt VssCollection.CollectionEndpoint
          tmp_dir: /tmp
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - comprehend:DetectEntities
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListBucket
              Resource:
                - !GetAtt S3Images.Arn
                - !Sub ${S3Images.Arn}/*
                - !GetAtt S3Videos.Arn
                - !Sub ${S3Videos.Arn}/*
                - !GetAtt S3ClipSearch.Arn
                - !Sub ${S3ClipSearch.Arn}/*
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Update*
                - dynamodb:Put*
                - dynamodb:Scan
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTable}/*
            - Effect: Allow
              Action:
                - bedrock:InvokeModel*
              Resource: !Sub arn:${AWS::Partition}:bedrock:*::foundation-model/*
            - Effect: Allow
              Action:
                - bedrock:Rerank
              Resource: "*"
            - Effect: Allow
              Action:
                - aoss:APIAccessAll
                - aoss:Create*
                - aoss:Update*
                - aoss:Get*
                - aoss:List*
              Resource: !Sub arn:${AWS::Partition}:aoss:${AWS::Region}:${AWS::AccountId}:collection/*

      Events:
        HttpApiEventGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiVss
            Path: /search
            Method: GET
        HttpApiEventPost:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiVss
            Path: /search
            Method: POST

  SearchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Search}
      KmsKeyId: !GetAtt VssKmsKey.Arn
      RetentionInDays: 365

  S3StaticWeb:
    Type: AWS::S3::Bucket
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: S3 hosting bucket does not need logging configured
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  AllowAccessToVssWebsite:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3StaticWeb
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudfront.amazonaws.com
            Action:
              - s3:GetObject
            Resource:
              - !Sub ${S3StaticWeb.Arn}/*
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${VssS3Distribution}

  S3Logging:
    Type: AWS::S3::Bucket
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: S3 Logging bucket does not need logging configured
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred

  S3LoggingPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Logging
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Action: s3:*
            Resource:
              - !GetAtt S3Logging.Arn
              - !Sub ${S3Logging.Arn}/*
            Condition:
              Bool:
                "aws:SecureTransport": False
            Principal: "*"
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action:
              - s3:PutObject
              - s3:GetBucketAcl
              - s3:PutBucketAcl
            Resource:
              - !GetAtt S3Logging.Arn
              - !Sub ${S3Logging.Arn}/*
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/*

  VssOac:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Ref AWS::StackName
        Description: VSS OAC Policy
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  VssS3Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: !Ref S3StaticWeb
            DomainName: !GetAtt S3StaticWeb.RegionalDomainName
            OriginAccessControlId: !Ref VssOac
            S3OriginConfig: {}
        Enabled: True
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: !Ref S3StaticWeb
          ForwardedValues:
            QueryString: False
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
        Restrictions:
          GeoRestriction:
            RestrictionType: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: True
          MinimumProtocolVersion: TLSv1.2_2021
        Logging:
          Bucket: !Sub "${S3Logging}.s3.amazonaws.com"
          IncludeCookies: false
          Prefix: "cloudfront-logs/"

  VssCognito:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: True
          RequireUppercase: True
          RequireNumbers: True
          RequireSymbols: True
          TemporaryPasswordValidityDays: 1

  VssCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref VssCognito

  VssCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref VssCognito
      Domain: !Sub vss-${AWS::AccountId}

Outputs:
  Region:
    Value: !Ref AWS::Region

  ApiEndpoint:
    Value: !Sub https://${ApiVss}.execute-api.${AWS::Region}.${AWS::URLSuffix}

  CognitoUserPoolID:
    Value: !Ref VssCognito

  CognitoWebClientID:
    Value: !Ref VssCognitoUserPoolClient

  WebUIBucket:
    Value: !Ref S3StaticWeb

  WebUrl:
    Value: !GetAtt VssS3Distribution.DomainName
